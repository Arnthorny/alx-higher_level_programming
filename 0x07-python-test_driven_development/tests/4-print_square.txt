The ``4-print_square`` module
==============================

Using ``print_square``
---------------------

This module contains the print_square function
that prints a square with the character '#':

Syntax:
	print_square(size)

Import the function from the module:
	>>> print_square = __import__("4-print_square").print_square

Test that function has a docstring:
    >>> len(print_square.__doc__) > 1
    True

Test with size = 4
	>>> print_square(4)	#doctest: +NORMALIZE_WHITESPACE
	####
	####
	####
	####

Test with size = 0
	>>> print_square(0)
	
Test with size = 10
	>>> print_square(10)	#doctest: +NORMALIZE_WHITESPACE
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

Test with a float size = 2.4:
	>>> print_square(2.4)	
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test with size < 0:
	>>> print_square(-2)
	Traceback (most recent call last):
		...
	ValueError: size must be >= 0

Test with size = -inf:
	>>> print_square(float('-inf'))
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test with size = inf:
	>>> print_square(float('inf'))
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test with no arguments:
	>>> print_square()	
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test with list as only argument:
	>>> print_square([1, 2, 3, 4, 5])
	Traceback (most recent call last):
		...
	TypeError: size must be an integer
